<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-06-24 09:09:03                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

class BaseStorable extends AutoBaseStorable implements Prototyped
{
	protected $defaultListOrderBy = array('displayOrder');
	protected $propertyDisplayMethods = array();

	/**
	 * @return BaseStorable
	**/
	public static function create()
	{
		return new self;
	}


	/**
	 * @return ProtoBaseStorable
	**/
	public static function proto()
	{
		return Singleton::getInstance('ProtoBaseStorable');
	}

	// your brilliant stuff goes here
	public function getDisplayableData($exclude = array(), $includeOnly = array())
	{
		$displayableData = array();

		/** @var LightMetaProperty $property */
		foreach ($this->proto()->getExpandedPropertyList() as $property) {
			$propertyName = $property->getName();
			if(in_array($propertyName, $exclude)) {
				continue;
			}

			if(count($includeOnly) > 0 && !in_array($propertyName, $includeOnly)) {
				continue;
			}

			$settings = array();

			if(isset($this->propertyDisplayMethods[$propertyName])) {
				$settings['displayMethod'] = $this->propertyDisplayMethods[$propertyName];
			}

			$displayableData[$propertyName] = $this->getPropertyDisplayValue($propertyName, $settings);
		}

		return $displayableData;
	}


	/**
	 * @return array|null|string
	 */
	public function getPropertyDisplayValue($propertyName, $settings = array())
	{
		if (is_array($propertyName)) {
			$settings = array_merge($settings, $propertyName);
			$propertyName = $settings['name'];
			unset($settings['name']);
		}

		$proto = $this->proto();

		if (!$proto->isPropertyExists($propertyName)) {

			if(method_exists($this, 'get' .ucfirst($propertyName))) {
				return $this->{'get' .ucfirst($propertyName)}();
			}

			if(method_exists($this, $propertyName)) {
				return $this->$propertyName();
			}
			return null;
		}

		$property = $proto->getPropertyByName($propertyName);
		$propertyType = $property->getType();
		if (isset($settings['type'])) {
			$propertyType = $settings['type'];
		}

		$getterName = 'get' . ucfirst($propertyName);
		$propertyValue = $this->$getterName();

		if(!$propertyValue || $propertyValue === null) {
			return '';
		}

		if (isset($settings['displayMethod'])) {
			$propertyValue = $propertyValue->{'get' . ucfirst($settings['displayMethod'])}();
		}

		if ($propertyValue instanceof UnifiedContainer) {
			$propertyValue = $propertyValue->getList();

			if (isset($settings['displayList'])) {
				$propertyValue = ArrayUtilsExtended::objectListToSimpleIndexed($propertyValue, 'id', $settings['displayList']);
			}
		} else {
			switch (ucfirst($propertyType)) {
				case 'Date':
					$propertyValue = $propertyValue->toFormatString(DATE_FORMAT);
					break;
				case 'Timestamp':
				case 'TimestampTZ':
					$propertyValue = $propertyValue->toFormatString(DATETIME_FORMAT);
					break;
				case 'Time':
					$propertyValue = isset($settings['fullTime']) ? $propertyValue->toFullString() : $propertyValue->toString();
					break;
			}
		}

		return $propertyValue;
	}
}