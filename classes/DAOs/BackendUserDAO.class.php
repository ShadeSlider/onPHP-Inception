<?php

/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-04-11 12:53:24                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class BackendUserDAO extends AutoBackendUserDAO
	{

		private $fieldMapping;

		// your brilliant stuff goes here


		/**
		 * @return BackendUser|null
		 */
		public function getByMD5HashedId($id, $expires = Cache::EXPIRES_MEDIUM)
		{
			Assert::isScalar($id);
			Assert::isNotEmpty($id);

			$user = null;

			try {
				$user = $this->getByLogic(
					Expression::andBlock()->
						expAnd(Expression::eq(SQLFunction::create('md5', DBField::create('id')->castTo('text')), $id))->
						expAnd(Expression::isTrue($this->getMappedField('isActive')))->
						expAnd(Expression::isFalse($this->getMappedField('isDeleted')))
					,
					$expires
				);
			}
			catch (ObjectNotFoundException $e) {
				/* user not found */
			}

			return $user;
		}


		/**
		 * @return BackendUser|null
		 */
		public function getByLoginAndPassword($userLogin, $userPassword)
		{
			$user = null;

			try {
				$user = $this->getByLogic(
					Expression::andBlock()->
						expAnd(Expression::eq('login', $userLogin))->
						expAnd(Expression::eq('password', md5($userPassword)))->
						expAnd(Expression::isTrue($this->getMappedField('isActive')))->
						expAnd(Expression::isFalse($this->getMappedField('isDeleted')))
				);
			}
			catch (ObjectNotFoundException $e) {
				/* user not found */
			}


			return $user;
		}


		/**
		 * @return BackendUser|null
		 */
		public function getByEmailAndPassword($userEmail, $userPassword)
		{
			$user = null;

			try {
				$user = $this->getByLogic(
					Expression::andBlock()->
						expAnd(Expression::eq('email', $userEmail))->
						expAnd(Expression::eq('password', md5($userPassword)))->
						expAnd(Expression::isTrue($this->getMappedField('isActive')))->
						expAnd(Expression::isFalse($this->getMappedField('isDeleted')))
				);
			}
			catch (ObjectNotFoundException $e) {
				/* user not found */
			}


			return $user;
		}
	}