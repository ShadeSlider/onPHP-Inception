<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-05-06 10:22:55                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	final class BackendUserAccessRolesDAO extends ManyToManyLinked
	{
		public function __construct(BackendUser $backendUser, $lazy = false)
		{
			parent::__construct(
				$backendUser,
				BackendUserRole::dao(),
				$lazy
			);
		}
		
		/**
		 * @return BackendUserAccessRolesDAO
		**/
		public static function create(BackendUser $backendUser, $lazy = false)
		{
			return new self($backendUser, $lazy);
		}
		
		public function getHelperTable()
		{
			return 'backend_user__backend_user_role';
		}
		
		public function getChildIdField()
		{
			return 'backend_user_role_id';
		}
		
		public function getParentIdField()
		{
			return 'backend_user_id';
		}


		/**
		 * @return bool
		 */
		public function hasFullAccessToController($controller)
		{
			$controllerName = $controller;

			if($controller instanceof Controller) {
				$controllerName = str_replace('Controller', '', get_class($controller));
			}

			$userRoles = $this->getList();

			$permissionCriteria = Criteria::create()->
			add(Expression::isTrue('isActive'))->
			add(Expression::isFalse('isDeleted'))->
			add(Expression::eq('name', $controllerName))
			;

			/** @var $role BackendUserRole */
			foreach($userRoles as $role) {
				$permissonsDao = $role->getPermissions()->setCriteria($permissionCriteria);

				if(count($permissonsDao->getList()) > 0) {
					return true;
				}
			}

			return false;
		}

		/**
		 * @return bool
		 */
		public function hasAccessToControllerAction($controller, $actionName)
		{
			$controllerName = $controller;

			if($controller instanceof Controller) {
				$controllerName = str_replace('Controller', '', get_class($controller));
			}

			$userRoles = $this->getList();

			$permissionCriteria = Criteria::create()->
			add(Expression::isTrue('isActive'))->
			add(Expression::isFalse('isDeleted'))->
			add(Expression::eq('parent.name', $controllerName))->
			add(Expression::eq('name', $actionName))
			;

			/** @var $role BackendUserRole */
			foreach($userRoles as $role) {
				$permissionsDao = $role->getPermissions()->setCriteria($permissionCriteria);

				if(count($permissionsDao->getList()) > 0) {
					return true;
				}
			}

			return false;
		}


		public function getAllAccessibleResources()
		{
			$userRoles = $this->getList();
			$accessibleResourcesByRole = array();

			$permissionCriteria = Criteria::create()->
			add(Expression::isTrue('isActive'))->
			add(Expression::isFalse('isDeleted'))->
			addOrder(OrderBy::create('type'));
			;

			/** @var $role BackendUserRole */
			foreach($userRoles as $role) {
				$permissionsDao = $role->getPermissions()->setCriteria($permissionCriteria);

				$accessibleResourcesByRole[$role->getName()] = array(
					'role' => $role,
					'resources' => $permissionsDao->getList()
				);
			}

			return $accessibleResourcesByRole;
		}
	}
?>