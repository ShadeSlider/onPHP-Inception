<?php

/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-06-24 09:09:03                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

abstract class BaseStorableDAO extends AutoBaseStorableDAO
{
	// your brilliant stuff goes here
	public function getWithMinId()
	{
		$idCriteria = Criteria::create($this)->addProjection(Projection::min('id', 'id'));

		return $this->getById($idCriteria->getCustom('id'));
	}

	public function getBy($fieldName, $fieldValue, $silent = false)
	{
		$fieldName = $this->getMappedField($fieldName);
		try {
			$entity = $this->getByLogic(
				Expression::eq($fieldName, $fieldValue)
			);
		} catch (ObjectNotFoundException $e) {
			if ($silent) {
				$entity = null;
			} else {
				throw $e;
			}
		}

		return $entity;
	}

	public function getByFields($fields, $silent = false)
	{
		$mappedFields = array();

		foreach ($fields as $fieldName => $fieldValue) {
			$mappedFields[$this->getMappedField($fieldName)] = $fieldValue;
		}

		$expressionChain = Expression::chain();
		foreach($mappedFields as $fieldName => $fieldValue) {
			$expressionChain->expAnd(Expression::eq($fieldName, $fieldValue));
		}

		try {
			$entity = $this->getByLogic($expressionChain);
		} catch (ObjectNotFoundException $e) {
			if ($silent) {
				$entity = null;
			} else {
				throw $e;
			}
		}

		return $entity;
	}

	public function getRandom($silent = false)
	{
		$criteria =
			Criteria::create($this)->
				addOrder(SQLFunction::create('random'))->
				setLimit(1);

		$object = null;

		try {
			$object = $criteria->get();
		} catch (ObjectNotFoundException $e) {
			if (!$silent) {
				throw $e;
			}
		}

		return $object;
	}

	public function getList()
	{
		try {
			return $this->getPlainList();
		} catch (ObjectNotFoundException $e) {
			return array();
		}
	}

	public function getListOfDisplayable($limit = null, $offset = null, $orderBy = null)
	{
		$criteria = Criteria::create($this);
		$criteria = CriteriaUtils::addDefaultFlags($criteria);

		if ($limit) {
			$criteria->setLimit($limit);
		}

		if ($offset) {
			$criteria->setOffset($offset);
		}

		if($orderBy) {
			$criteria->addOrder($orderBy);
		}
		else {
			$criteria->
				addOrder('displayOrder')->
				addOrder('id')
			;
		}

		try {
			return $criteria->getList();
		} catch (ObjectNotFoundException $e) {
			return array();
		}
	}

	public function getPlainIndexedListOfDisplayable($limit = null, $offset = null, $keyName = 'id')
	{
		$list = $this->getListOfDisplayable($limit, $offset);

		return ArrayUtilsExtended::objectListToSimpleIndexed($list, $keyName, 'name');
	}
}