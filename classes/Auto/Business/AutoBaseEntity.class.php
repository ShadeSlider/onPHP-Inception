<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-07-22 19:02:51                    *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoBaseEntity extends BaseStorable
	{
		protected $createdAt = null;
		protected $updatedAt = null;
		protected $deletedAt = null;
		protected $displayOrder = 0;
		protected $isActive = true;
		protected $isVisible = true;
		protected $isDeleted = false;
		
		/**
		 * @return TimestampTZ
		**/
		public function getCreatedAt()
		{
			return $this->createdAt;
		}
		
		/**
		 * @return BaseEntity
		**/
		public function setCreatedAt(TimestampTZ $createdAt = null)
		{
			$this->createdAt = $createdAt;
			
			return $this;
		}
		
		/**
		 * @return BaseEntity
		**/
		public function dropCreatedAt()
		{
			$this->createdAt = null;
			
			return $this;
		}
		
		/**
		 * @return TimestampTZ
		**/
		public function getUpdatedAt()
		{
			return $this->updatedAt;
		}
		
		/**
		 * @return BaseEntity
		**/
		public function setUpdatedAt(TimestampTZ $updatedAt = null)
		{
			$this->updatedAt = $updatedAt;
			
			return $this;
		}
		
		/**
		 * @return BaseEntity
		**/
		public function dropUpdatedAt()
		{
			$this->updatedAt = null;
			
			return $this;
		}
		
		/**
		 * @return TimestampTZ
		**/
		public function getDeletedAt()
		{
			return $this->deletedAt;
		}
		
		/**
		 * @return BaseEntity
		**/
		public function setDeletedAt(TimestampTZ $deletedAt = null)
		{
			$this->deletedAt = $deletedAt;
			
			return $this;
		}
		
		/**
		 * @return BaseEntity
		**/
		public function dropDeletedAt()
		{
			$this->deletedAt = null;
			
			return $this;
		}
		
		public function getDisplayOrder()
		{
			return $this->displayOrder;
		}
		
		/**
		 * @return BaseEntity
		**/
		public function setDisplayOrder($displayOrder)
		{
			$this->displayOrder = $displayOrder;
			
			return $this;
		}
		
		public function getIsActive()
		{
			return $this->isActive;
		}
		
		public function isIsActive()
		{
			return $this->isActive;
		}
		
		/**
		 * @return BaseEntity
		**/
		public function setIsActive($isActive = null)
		{
			Assert::isTernaryBase($isActive);
			
			$this->isActive = $isActive;
			
			return $this;
		}
		
		public function getIsVisible()
		{
			return $this->isVisible;
		}
		
		public function isIsVisible()
		{
			return $this->isVisible;
		}
		
		/**
		 * @return BaseEntity
		**/
		public function setIsVisible($isVisible = null)
		{
			Assert::isTernaryBase($isVisible);
			
			$this->isVisible = $isVisible;
			
			return $this;
		}
		
		public function getIsDeleted()
		{
			return $this->isDeleted;
		}
		
		public function isIsDeleted()
		{
			return $this->isDeleted;
		}
		
		/**
		 * @return BaseEntity
		**/
		public function setIsDeleted($isDeleted = null)
		{
			Assert::isTernaryBase($isDeleted);
			
			$this->isDeleted = $isDeleted;
			
			return $this;
		}
	}
?>